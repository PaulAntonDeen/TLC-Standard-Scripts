//Non-normal control chart script. (c) 2017 Paul Deen
//Wish list:
//By variable
//Respect hide&excludes
//Add full suite of distributions availble in JMP
//3sigma > max of Y-axis, color bands broken.

names default to here(1);

//Check for an active table, if not present open dialog.
dt = If( N Rows() > 0,
	dt = Current Data Table(),
	dt = Open()
);

dt << Clear Select;
dt << Clear Column Selection;
If( !Namespace Exists( "NonNormalControlChart" ),nsref = New Namespace("NonNormalControlChart"));

Validate = function({},
	SetReturn=1;
	If(and( num(word(1,jmp version(),"."))<14, RBModel << get selected() == "Shash"),
		new window("Error", << modal, text box("JMP versions lower than 14 cannot do a Shash fit. Please use one of the other fits."));
		SetReturn=0;
	);
	If(is missing(SL << get()),
		new window("Error", << modal, text box("Please specify a Spec Limit"));
		SetReturn=0;
	);
	If( n items(YDestinationBox << get items())<1,
		new window("Error", << modal, text box("You must specify a Y column"));
		SetReturn=0;
	);
	Return(SetReturn)
);

SetModel = expr(
	If( GoalCB << get()==1,
		RBModel << Set Items( {"Gamma", "Weibull", "Exponential", "LogNormal", "Glog"} );
		SpecTbox << set text("USL");
	,
		RBModel << set items( {"Gamma", "Weibull", "LogNormal", "Glog"} );
		SpecTbox << set text("LSL");
	);
	try(getLimit(YDestinationBox << Get Items(),GoalCB << Get Selected));
);

getLimit = function({colname, goal},
	{Default Local},
	LimitPropertyExpr = column(colname[1]) << Get Property(Spec limits);
	for (i=1, i <= N Arg(LimitPropertyExpr),i++,
		match(goal,
			"Minimize",
			if(
				startswith(char(arg(liLimitPropertyExprmits,i)),"USL"),
				SL << set(arg(arg(LimitPropertyExpr,i),1));
				break();
			),
			"Maximize",
			if(
				startswith(char(arg(LimitPropertyExpr,i)),"LSL"),
				SL << set(arg(arg(LimitPropertyExpr,i),1));
				break();
			);
		)
	);
);

//Launch dialog
LaunchDialog = New Window( "Create Non-Normal control chart",
	<<on validate(Validate),
	Border Box( Left( 3 ), top( 2 ),
		v list box(
			H Center Box(
				H list box(
					V Center Box(Border Box( Right( 25 ), Text Box( "Non-normal", << Set Font Size( 16 ), << Set Font( "Calibri" ), << Set Font Style("Bold Underline")))),
					h center box(
						Picture Box(
							New Image(
								Char To Blob(
									"",
									"base64compressed"
								),
								"png"
							)
						)
					),
					V Center Box(Border Box( Left( 25 ), Text Box( "Control charts", << Set Font Style("Bold Underline"), << Set Font Size( 16 ), << Set Font( "Calibri" )))),
				)
			),
			Text Box( "" ),
			VListBox(
				HListBox(
					Panel Box( "Assign columns to roles",
						Lineup Box( N Col( 3 ),
							SourceBox = Filter Col Selector( All, nLines( 5 ) ),
							Lineup Box( N Col( 2 ), Spacing( 3 ),
								Button Box( "Set Y-Value", YDestinationBox << Append( SourceBox << GetSelected ) ),
								YDestinationBox = Col List Box( nLines( 1 ), MaxItems( 1 ), MinItems( 1 ), numeric, On Change(getLimit(YDestinationBox << Get Items(),GoalCB << Get Selected)) ),
								Button Box( "Set X-Label", XDestinationBox << Append( SourceBox << GetSelected ) ),
								XDestinationBox = Col List Box( nLines( 1 ), MaxItems( 1 ) )
							)
						)
					),
					Panel box("Options",
						Lineup Box( N Col( 2 ),
							Text Box( "Goal" ),
							GoalCB = Combo Box( {"Minimize", "Maximize"}, SetModel ),
							SpecTbox = Text Box( "" ),
							SL = Number Edit Box(),
							Text Box( "Modelling distribution" ),
							RBModel = Radio Box( {.} ),
							SetModel;
						)
					),
					Panel Box( "Actions",
						Lineup Box( N Col( 1 ),
							Button Box( "OK",
								NonNormalControlChart:ResponseCol = Column( (YDestinationBox << Get items())[1] );
								NonNormalControlChart:YColRecall = YDestinationBox << get items();
								Try(NonNormalControlChart:IDCol = Column( (XDestinationBox << Get items())[1] ));
								NonNormalControlChart:XColRecall = XDestinationBox << get items();
								Try(NonNormalControlChart:SLRecall = SpecLimit = SL << Get);
								Goal = GoalCB << get selected();
								NonNormalControlChart:GoalRecall = GoalCB << Get();
								SelectedDistribution = RBModel << Get Selected();
								NonNormalControlChart:ModelRecall = RBModel << Get();
								LaunchDialog << close window();
								Body;
							),
							Button Box( "Remove",
								YDestinationBox << RemoveSelected;
								XDestinationBox << RemoveSelected;
							),
							Button Box( "Recall", 
								Try(
									YDestinationBox << set items( NonNormalControlChart:YColRecall );
									XDestinationBox << set items( NonNormalControlChart:XColRecall );
									SL << Set( NonNormalControlChart:SLRecall );
									GoalCB << set( NonNormalControlChart:GoalRecall );
									SetModel;
									RBModel << set(NonNormalControlChart:ModelRecall);
								)
							),
							Button Box( "Cancel", current window() << close window ),
						)
					)
				),
				HCenterBox(
					Panel box("Instructions",
						Text box("Only use this tool for a \!"Minimize\!" or \!"Maximize\!" type of control chart where the response is not normally distributed. \!n\!nUse Distribution platform to find the right model.",
							<< set wrap(1000)
						)
					)
				)
			)
		)
	)
);

Body = expr(
	Match(SelectedDistribution,
	"Shash",
		Dist = Report(
			Distribution(
				Continuous Distribution(
					Column( NonNormalControlChart:ResponseCol ),
					Fit Distribution( SHASH )
				)
			)
		);
		ShapeGamma = (Dist[Number Col Box( "Estimate" )] << get as matrix)[1];
		ShapeDelta = (Dist[Number Col Box( "Estimate" )] << get as matrix)[2];
		Theta = (Dist[Number Col Box( "Estimate" )] << get as matrix)[3];
		ScaleSigma = (Dist[Number Col Box( "Estimate" )] << get as matrix)[4];
		Dist << Close Window;
		If(Goal == "Minimize",
			Equivalent0ksigma = Shash Quantile( 0.5, ShapeGamma, ShapeDelta, Theta, ScaleSigma );
			Equivalent1ksigma = Shash Quantile( 0.682689492137086, ShapeGamma, ShapeDelta, Theta, ScaleSigma );
			Equivalent2ksigma = Shash Quantile( 0.954499736103642, ShapeGamma, ShapeDelta, Theta, ScaleSigma );
			Equivalent3ksigma = Shash Quantile( 0.99730020393674, ShapeGamma, ShapeDelta, Theta, ScaleSigma );
			,
			Equivalent0ksigma = Shash Quantile( 0.5, ShapeGamma, ShapeDelta, Theta, ScaleSigma );
			Equivalent1ksigma = Shash Quantile( 0.317310507862914, ShapeGamma, ShapeDelta, Theta, ScaleSigma );
			Equivalent2ksigma = Shash Quantile( 0.0455002638963584, ShapeGamma, ShapeDelta, Theta, ScaleSigma );
			Equivalent3ksigma = Shash Quantile( 0.00269979606326019, ShapeGamma, ShapeDelta, Theta, ScaleSigma );
		);
		,
	"Gamma",
		Dist = Report(
			Distribution(
				Continuous Distribution(
					Column( NonNormalControlChart:ResponseCol ),
					Fit Distribution( Gamma() )
				)
			)
		);
		Alpha = (Dist[Number Col Box( "Estimate" )] << get as matrix)[1];
		Sigma = (Dist[Number Col Box( "Estimate" )] << get as matrix)[2];
		Theta = (Dist[Number Col Box( "Estimate" )] << get as matrix)[3];
		Dist << Close Window;
		If(Goal == "Minimize",
			Equivalent0ksigma = Gamma Quantile( 0.5, Alpha, Sigma, Theta );
			Equivalent1ksigma = Gamma Quantile( 0.682689492137086, Alpha, Sigma, Theta );
			Equivalent2ksigma = Gamma Quantile( 0.954499736103642, Alpha, Sigma, Theta );
			Equivalent3ksigma = Gamma Quantile( 0.99730020393674, Alpha, Sigma, Theta );
			,
			Equivalent0ksigma = Gamma Quantile( 0.5, Alpha, Sigma, Theta );
			Equivalent1ksigma = Gamma Quantile( 0.317310507862914, Alpha, Sigma, Theta );
			Equivalent2ksigma = Gamma Quantile( 0.0455002638963584, Alpha, Sigma, Theta );
			Equivalent3ksigma = Gamma Quantile( 0.00269979606326019, Alpha, Sigma, Theta );
		);
		,
	"Weibull",
		Dist = Report(
			Distribution(
				Continuous Distribution(
					Column( NonNormalControlChart:ResponseCol ),
					Fit Distribution( Weibull() )
				)
			)
		);
		Alpha = (Dist[Number Col Box( "Estimate" )] << get as matrix)[1];
		Beta = (Dist[Number Col Box( "Estimate" )] << get as matrix)[2];
		Dist << Close Window;
		If(Goal == "Minimize",
			Equivalent0ksigma = Weibull Quantile( 0.5, Beta, Alpha );
			Equivalent1ksigma = Weibull Quantile( 0.682689492137086, Beta, Alpha );
			Equivalent2ksigma = Weibull Quantile( 0.954499736103642, Beta, Alpha );
			Equivalent3ksigma = Weibull Quantile( 0.99730020393674, Beta, Alpha );
			,
			Equivalent0ksigma = Weibull Quantile( 0.5, Beta, Alpha );
			Equivalent1ksigma = Weibull Quantile( 0.317310507862914, Beta, Alpha );
			Equivalent2ksigma = Weibull Quantile( 0.0455002638963584, Beta, Alpha );
			Equivalent3ksigma = Weibull Quantile( 0.00269979606326019, Beta, Alpha );
		);
		,
	"Exponential",
		Dist = Report(
			Distribution(
				Continuous Distribution(
					Column( NonNormalControlChart:ResponseCol ),
					Fit Distribution( Exponential )
				)
			)
		);
		Scale = (Dist[Number Col Box( "Estimate" )] << get as matrix)[1];
		Dist << Close Window;
		Equivalent0ksigma = -(Ln( (-0.5) + 1 ) * Scale);
		Equivalent1ksigma = -(Ln( (-0.682689492137086) + 1 ) * Scale);
		Equivalent2ksigma = -(Ln( (-0.954499736103642) + 1 ) * Scale);
		Equivalent3ksigma = -(Ln( (-0.99730020393674) + 1 ) * Scale);
		,	
	"LogNormal",
		Dist = Report(
			Distribution(
				Continuous Distribution(
					Column( NonNormalControlChart:ResponseCol ),
					Fit Distribution( LogNormal() )
				)
			)
		);
		Mu = (Dist[Number Col Box( "Estimate" )] << get as matrix)[1];
		Sigma = (Dist[Number Col Box( "Estimate" )] << get as matrix)[2];
		Dist << Close Window;
		If(Goal == "Minimize",
			Equivalent0ksigma = LogNormal Quantile( 0.5, Mu, Sigma );
			Equivalent1ksigma = LogNormal Quantile( 0.682689492137086, Mu, Sigma );
			Equivalent2ksigma = LogNormal Quantile( 0.954499736103642, Mu, Sigma );
			Equivalent3ksigma = LogNormal Quantile( 0.99730020393674, Mu, Sigma );
			,
			Equivalent0ksigma = LogNormal Quantile( 0.5, Mu, Sigma );
			Equivalent1ksigma = LogNormal Quantile( 0.317310507862914, Mu, Sigma );
			Equivalent2ksigma = LogNormal Quantile( 0.0455002638963584, Mu, Sigma );
			Equivalent3ksigma = LogNormal Quantile( 0.00269979606326019, Mu, Sigma );
		);
		,	
	"GLog",
		Dist = Report(
			Distribution(
				Continuous Distribution(
					Column( NonNormalControlChart:ResponseCol ),
					Fit Distribution( GLog )
				)
			)
		);
		Mu = (Dist[Number Col Box( "Estimate" )] << get as matrix)[1];
		Sigma = (Dist[Number Col Box( "Estimate" )] << get as matrix)[2];
		Lambda = (Dist[Number Col Box( "Estimate" )] << get as matrix)[3];
		Dist << Close Window;
		If(Goal == "Minimize",
			Equivalent0ksigma = Glog Quantile( 0.5, Mu, Sigma, Lambda );
			Equivalent1ksigma = Glog Quantile( 0.682689492137086, Mu, Sigma, Lambda );
			Equivalent2ksigma = Glog Quantile( 0.954499736103642, Mu, Sigma, Lambda );
			Equivalent3ksigma = Glog Quantile( 0.99730020393674, Mu, Sigma, Lambda );
			,
			//maximize
			Equivalent0ksigma = Glog Quantile( 0.5, Mu, Sigma, Lambda );
			Equivalent1ksigma = Glog Quantile( 0.317310507862914, Mu, Sigma, Lambda );
			Equivalent2ksigma = Glog Quantile( 0.0455002638963584, Mu, Sigma, Lambda );
			Equivalent3ksigma = Glog Quantile( 0.00269979606326019, Mu, Sigma, Lambda );
		);
	);

	//Create graph script
	Match(Goal,
	"Minimize",
		Eval(
			Substitute(
				Expr(
					dt << new script(
						Concat( "Graph ", __ColName__ ),
						PPMDist = Distribution(invisible,
							Stack( 1 ),
							Continuous Distribution(
								Column(__NonNormalControlChart:ResponseCol__),__Distribution__(Spec Limits( USL(__SpecLimit__)))
							)
						);
						NewPPM = Report(PPMDist)["Quantile Sigma"][Number col box(3)][3];
						PPMDist << close window();
					
					//Define alarms
						Current Data Table()<<Clear Row States();
						OOS = 0;
						OOC = 0;
						Goal = __Goal__;
						//Calculate alarms
						For Each Row(
							//2 out of 3 beyond 2s
							If( Row() > 2,
								If(__NonNormalControlChart:ResponseCol__[Row()] >= __Equivalent2ksigma__ & or(__NonNormalControlChart:ResponseCol__[Row()-1] >= __Equivalent2ksigma__,__NonNormalControlChart:ResponseCol__[Row()-2] >= __Equivalent2ksigma__),
								Row State( Row() ) = As Row State(99152);
								OOC++),
							);
							//8 out of 9 on one side of average
							If( Row() > 8,
								n = 0;
								For( i = 0, i <= 8, i++,
									If( __NonNormalControlChart:ResponseCol__[Row() - i] > __Equivalent0ksigma__,
										n++
									)
								);
								If( n > 8,
									Row State( Row() ) = As Row State(99104);
									OOC++;
								),
							);
							//1 out of control
							If( __NonNormalControlChart:ResponseCol__[Row()] > __Equivalent3ksigma__,
								Row State( Row() ) = As Row State(99088);
								OOC++;
							);
							//1 Out of spec
							If( __NonNormalControlChart:ResponseCol__[Row()] > __SpecLimit__,
								Row State( Row() ) = As Row State(1457);
								OOS++;
								OOC++;
							);
						);
						POOC = round(100*OOC/nRows(),2);
						POOS = round(100*OOS/nRows(),2);
						RangeMax = max(__SpecLimit__,col max(__NonNormalControlChart:ResponseCol__));
						RangeMin = min(__SpecLimit__,col min(__NonNormalControlChart:ResponseCol__));
						CC = Control Chart(
							Sample Label( __XCol__ ),
							Sample Size( 1 ),
							KSigma( 3 ),
							Chart Col(__NonNormalControlChart:ResponseCol__,Run Chart( Show Center Line( 0 ), Show Zones( 0 ), Shade Zones( 0 ) )),
							SendToReport(			
								Dispatch(
									{""},
									"Run Chart",
									FrameBox,
									{Frame Size( 845, 278 )}
								),
								Dispatch(
									{""},
									"Run Chart",
									FrameBox( 2 ),
									{Frame Size( 98, 278 )}
								),
								Dispatch(
									{},
									"2",
									ScaleBox,
									{Min( RangeMin - abs(Rangemin*0.05)), Max( RangeMax + abs(Rangemax*0.05)), Inc( round((RangeMax-RangeMin)/10,1) ), Minor Ticks( 1 ),
										Add Ref Line( __SpecLimit__, "Solid", "Blue", Concat("Upper Spec limit ",Char(round(__SpecLimit__,2))), 1 ),
										Add Ref Line( __Equivalent0ksigma__, "Solid", 83, Concat("Target ",Char(round(__Equivalent0ksigma__,2))), 1 ),
										Add Ref Line( __Equivalent1ksigma__, "Solid", 83, Concat("1 sigma ",Char(round(__Equivalent1ksigma__,2))), 1 ),
										Add Ref Line( __Equivalent2ksigma__, "Solid", 83, Concat("2 sigma ",Char(round(__Equivalent2ksigma__,2))), 1 ),
										Add Ref Line( __Equivalent3ksigma__, "Solid", 83, Concat("3 sigma ",Char(round(__Equivalent3ksigma__,2))), 1 ),
										Add Ref Line( {__Equivalent3ksigma__, RangeMax + abs(Rangemax*0.05)}, "Solid", "Red", "", 1, 0.4 ),
										Add Ref Line( {__Equivalent1ksigma__, __Equivalent3ksigma__}, "Solid", "Yellow", "", 1, 0.4 ),
										Add Ref Line( {RangeMin - abs(Rangemin*0.05), __Equivalent1ksigma__}, "Solid", "Green", "", 1, 0.4 )
									}
								)
							)
						);
						
						(CC << report)[ListBox(2)] << Append(
							V List Box(
								Outline Box( "Legend",
									V List Box(
										Text Box("Blue star: Out of spec"),
										Text Box( "Alarm 1: 1 point out of 3ơ" ),
										Text Box( "Alarm 2: 9 in a row on one side of Median" ),
										Text Box( "Alarm 5: 2 out of 3 points beyond 2ơ" )
									)
								),
								Outline Box( "Capability using " || __DistributionChar__,
									H List Box(
										String Col Box( "Name",
											{"%OOS predicted (PPM)", "K-Sigma", "Control Limit", "%OOC",
											"%OOS Actual"}
										),
										Number Col Box( "Value",
											{NewPPM, Normal Quantile( 1 - 2 * NewPPM / 1000000 ),
											__Equivalent3ksigma__, POOC, POOS}
										)
									)
								)
							)
						)
					)
				),
				Expr(__ColName__), NonNormalControlChart:ResponseCol << get name,
				Expr(__NonNormalControlChart:ResponseCol__), NonNormalControlChart:ResponseCol,
				Expr(__Equivalent0ksigma__),Equivalent0ksigma,
				Expr(__Equivalent1ksigma__),Equivalent1ksigma,
				Expr(__Equivalent2ksigma__),Equivalent2ksigma,
				Expr(__Equivalent3ksigma__),Equivalent3ksigma,
				Expr(__SpecLimit__),SpecLimit,
				Expr(__Distribution__),parse(SelectedDistribution),
				Expr(__DistributionChar__),SelectedDistribution,
				Expr(__XCol__),if(Is Empty(NonNormalControlChart:IDCol),empty(),NonNormalControlChart:IDCol),
				Expr(__Goal__),Goal,
			)
		),
	"Maximize",
		Eval(
			Substitute(
				Expr(
					dt << new script(
						Concat( "Graph ", __ColName__ ),
						PPMDist = Distribution(invisible,
							Stack( 1 ),
							Continuous Distribution(
								Column(__NonNormalControlChart:ResponseCol__),__Distribution__(Spec Limits( LSL(__SpecLimit__)))
							)
						);
						NewPPM = Report(PPMDist)["Quantile Sigma"][Number col box(3)][3];
						PPMDist << close window();
					
					//Define alarms
						Current Data Table()<<Clear Row States();
						OOS = 0;
						OOC = 0;
						Goal = __Goal__;
						//Calculate alarms
						For Each Row(
							//2 out of 3 beyond 2s
							If( Row() > 2,
								If(__NonNormalControlChart:ResponseCol__[Row()] <= __Equivalent2ksigma__ & or(__NonNormalControlChart:ResponseCol__[Row()-1] <= __Equivalent2ksigma__,__NonNormalControlChart:ResponseCol__[Row()-2] <= __Equivalent2ksigma__),
								Row State( Row() ) = As Row State(99152);
								OOC++;
								);
							);
							//8 out of 9 on one side of average
							If( Row() > 8,
								n = 0;
								For( i = 0, i <= 8, i++,
									If( __NonNormalControlChart:ResponseCol__[Row() - i] < __Equivalent0ksigma__,
										n++
									)
								);
								If( n > 8,
									Row State( Row() ) = As Row State(99104);
									OOC++;
								);
							);
							//1 out of control
							If( __NonNormalControlChart:ResponseCol__[Row()] < __Equivalent3ksigma__,
								Row State( Row() ) = As Row State(99088);
								OOC++;
							);
							//1 Out of spec
							If( __NonNormalControlChart:ResponseCol__[Row()] < __SpecLimit__,
								Row State( Row() ) = As Row State(1457);
								OOS++;
								OOC++;
							);
						);
						POOC = Round(100*OOC/nRows(),2);
						POOS = Round(100*OOS/nRows(),2);
						RangeMax = max(__SpecLimit__,col max(__NonNormalControlChart:ResponseCol__));
						RangeMin = min(__SpecLimit__,col min(__NonNormalControlChart:ResponseCol__));
							
						CC = Control Chart(
							Sample Label( __XCol__ ),
							Sample Size( 1 ),
							KSigma( 3 ),
							Chart Col(__NonNormalControlChart:ResponseCol__,Run Chart( Show Center Line( 0 ), Show Zones( 0 ), Shade Zones( 0 ) )),
							SendToReport(
								Dispatch(
									{},
									"2",
									ScaleBox,
									{Min( RangeMin ), Max(RangeMax), Inc( Round( (RangeMax-RangeMin) / 6, 0 ) ), Minor Ticks( 1 ),
										Add Ref Line( __SpecLimit__, "Solid", "Blue", Concat("Lower Spec limit ",Char(round(__SpecLimit__,2))), 1 ),
										Add Ref Line( __Equivalent0ksigma__, "Solid", 83, Concat("Target ",Char(round(__Equivalent0ksigma__,2))), 1 ),
										Add Ref Line( __Equivalent1ksigma__, "Solid", 83, Concat("-1ơ ",Char(round(__Equivalent1ksigma__,2))), 1 ),
										Add Ref Line( __Equivalent2ksigma__, "Solid", 83, Concat("-2ơ ",Char(round(__Equivalent2ksigma__,2))), 1 ),
										Add Ref Line( __Equivalent3ksigma__, "Solid", 83, Concat("-3ơ ",Char(round(__Equivalent3ksigma__,2))), 1 ),
										Add Ref Line( {RangeMin,__Equivalent3ksigma__}, "Solid", "Red", "", 1, 0.4 ),
										Add Ref Line( {__Equivalent3ksigma__,__Equivalent1ksigma__}, "Solid", "Yellow", "", 1, 0.4 ),
										Add Ref Line( {__Equivalent1ksigma__,RangeMax}, "Solid", "Green", "", 1, 0.4 )
									}
								),
								Dispatch(
									{""},
									"Run Chart",
									FrameBox,
									{Frame Size( 845, 278 )}
								),
								Dispatch(
									{""},
									"Run Chart",
									FrameBox( 2 ),
									{Frame Size( 98, 278 )}
								)
							)
						);
						
						(CC << report)[ListBox(2)] << Append(
							V List Box(
								Outline Box( "Legend",
									V List Box(
										Text Box("Blue star: Out of spec"),
										Text Box( "Alarm 1: 1 point out of 3ơ" ),
										Text Box( "Alarm 2: 9 in a row on one side of Median" ),
										Text Box( "Alarm 5: 2 out of 3 points beyond 2ơ" )
									)
								),
								Outline Box( "Capability using " || __DistributionChar__,
									H List Box(
										String Col Box( "Name",
											{"%OOS predicted (PPM)", "K-Sigma", "Control Limit", "%OOC",
											"%OOS Actual"}
										),
										Number Col Box( "Value",
											{NewPPM, Normal Quantile( 1 - 2 * NewPPM / 1000000 ),
											__Equivalent3ksigma__, POOC, POOS}
										)
									)
								)
							)
						)
					)
				),
				Expr(__ColName__), NonNormalControlChart:ResponseCol << get name,
				Expr(__NonNormalControlChart:ResponseCol__), NonNormalControlChart:ResponseCol,
				Expr(__Equivalent0ksigma__),Equivalent0ksigma,
				Expr(__Equivalent1ksigma__),Equivalent1ksigma,
				Expr(__Equivalent2ksigma__),Equivalent2ksigma,
				Expr(__Equivalent3ksigma__),Equivalent3ksigma,
				Expr(__SpecLimit__),SpecLimit,
				Expr(__Distribution__),parse(SelectedDistribution),
				Expr(__DistributionChar__),SelectedDistribution,
				Expr(__XCol__),if(Is Empty(NonNormalControlChart:IDCol),empty(),NonNormalControlChart:IDCol),
				Expr(__Goal__),Goal,
			)
		),
	);

	//Execute the last script (this one)
	Scripts = current data table()<<Get Table Script Names();
	current data table()<<run script(Scripts[n items(Scripts)]);
);