//Coded by Paul Deen for Thomas A. Little Consulting.//Launch dialogNames Default To Here( 1 );dt = If( N Rows() > 0,	dt = Current Data Table(),	FilePath="";	FilePath = Pick File(		"Select the results data table",		Get Default Directory();,		{"JMP Files|jmp"},		1,	);	If(FilePath=="",		New window("Error",<<modal,Text Box("No results table found, user hit cancel"));		Throw( "No results table found, user hit cancel" );	);	dt = Open(FilePath););dt << Clear Select;dt << Clear Column Selection;stop_flag = 0;New Window( "Distribution analysis",	<<Modal,	Border Box( Left( 3 ), top( 2 ),		ModalWindowDialog = V List Box(			H Center Box(				Panel Box( "Distribution Analysis", H List Box( V Center Box( Text Box( " © Thomas A. Little Consulting 2008-2017" ) ), ), )			),			Text Box( "" ),			H List Box(				V list box(					Panel Box( "Select columns", AvailableParameters = Filter Col Selector( All, width( 200 ), grouped, nLines( 10 ) ) ),					Panel Box("Instructions", text box("Data can be entered either in stacked (Label in the By, Values in the Y) or unstacked (each response in the Y) format. Max 10 different responses.", << set wrap(240)))				),				Panel Box( "Distributions",					lineup box(N col(2),						Button Box( "Y, Response", SummaryParameters << Append( AvailableParameters << GetSelected ) ),						SummaryParameters = Col List Box( width( 200 ), nLines( 10 ), numeric, MinItems( 1 ), MaxItems( 10 ) ), 						Button Box( "By", ByParameters << Append( AvailableParameters << GetSelected ) ),						ByParameters = Col List Box( width( 200 ), nLines( 1 ), set analysis type(Ordinal), MaxItems( 1 ) ), 					)				),				v list box(					Panel Box( "Type of fit", RB = Radio Box( {"Normal", "Best fit"} ) ),				),			),			H List Box(				Button Box( "OK",					ToSummarize = SummaryParameters << getItems;					UseFit = RB << Get Selected();					ByCol = ByParameters << get Items();				),				Button Box( "Cancel", stop_flag++ ), 			), 		), 	), );If( Or( stop_flag > 0, N Items( ToSummarize ) == 0 ),	Print( "User hit cancel" );	Stop(););//End launch dialog//Declare listsDistributions = {};VariableNames = {};Means = {};StdDevs = {};Counts = {};HistogramLineColor = {"Medium Dark Blue","Medium Dark Red","Medium Dark Green","Medium Dark Yellow","Medium Dark Fuchsia","Medium Dark Purple","Medium Dark Cyan","Medium Dark Gray","Medium Dark Orange","Medium Dark Magenta"};HistogramColor = {"Light Blue","Light Red","Light Green","Light Yellow","Light Fuchsia","Light Purple","Light Cyan","Light Gray","Light Orange","Light Magenta"};FitLineColor = {"Blue","Red","Green","Yellow","Fuchsia","Purple","Cyan","Gray","Orange","Magenta"};//End lists//Function to generate distributionsMakeDistribution = Function( {ColumnName, LineColor, RowColor, FitColor},	//ColumnName = column("2700K");	//LineColor = "Medium Dark Blue";	//RowColor = "Light Blue";	//FitColor = "Blue";	dist = Distribution(		Stack( 1 ),		Continuous Distribution(			Column( ColumnName ),			Quantiles( 0 ),			Summary Statistics( 0 ),			Horizontal Layout( 1 ),			Vertical( 0 ),			Density Axis( 1 ),			Count Axis( 0 ),			Outlier Box Plot( 0 ),			Fit Distribution( Normal( Goodness of Fit( 1 ) ) )		),		SendToReport(			Dispatch(				{},				"Distrib Histogram",				FrameBox,				{Frame Size( 440, 244 ), Grid Line Order( 3 ), Reference Line Order( 4 ), DispatchSeg(					Hist Seg( 1 ),					{Line Color( LineColor ), Fill Color( RowColor )}				), DispatchSeg( Line Seg( 1 ), {Line Color( FitColor )} )}			)		)	);	//Can we sue a nornmal curve?	NormalYN = (dist << xpath( "//OutlineBox[ contains( text(), 'Goodness-of-Fit Test')]//NumberColBoxHeader[contains(text(),'Prob')]/.." )) << Get;	If( And( NormalYN[1][1] <= 0.05, UseFit == "Best fit" ), 		//Non-normal		dist << (Fit Handle[1] << Remove Fit);		dist << Fit Distribution( "All" );	);	Return( dist ););//End function//Function to assemble seperate distributions into 1MakeFinalWindow = function({ColName},	//Create 1 graph with all distributions	For(i=2,i<= N items(Distributions),i++,		Report( Distributions[i] )[Outline Box( 2 )][FrameBox( 1 )] << Copy Frame Contents();		Report( Distributions[1] )[Outline Box( 2 )][FrameBox( 1 )] << Paste Frame Contents();	);	//Resize it to show all distributions	Report( Distributions[1] )[Outline Box( 2 )][ScaleBox( 1 )] << Min( ScaleMin );	Report( Distributions[1] )[Outline Box( 2 )][ScaleBox( 1 )] << Max( ScaleMax );	//Create a new window with the 1 graph	OutputWindow = New Window( dt << get name || ColName,		V List Box(			H Center Box( Text Box( Titlecase( Word( 1, dt << get name, "." ) ) || ColName ) ),			H Center Box( Text Box( UseFit ) ),			Report( Distributions[1] )[Picture Box( 1 )]		)	);	//Append a listbox for the descriptives	OutputWindow[Picture Box( 1 )] << sib append(		Panel Box( "",			Bob = V List Box(				Table Box( String Col Box( "Variable", {} ) ),			)		),		Horizontal	);	//Add the color coded names	For(i=1,i<=n items(VariableNames),i++,		Bob << append(Text Box( VariableNames[i], <<font color( HistogramColor[i] ) ));	);	//Add the rest of the descriptives	OutputWindow[List Box( 7 )] << sib append(		Table Box(			Number Col Box( "Mean", Means ),			Number Col Box( "StDev", StdDevs ),			Number Col Box( "N", Counts )		),		Horizontal	);	//Housekeeping, clean up!	For(i=n items(Distributions),i>=1,i--,		Distributions[i] << close window();	);	If(N items(ByCol)>0,Close(UnstackedDt, No save)););//End function//Loop to create multiple distributionsIf(N items(ByCol)>0,	//Stacked table	For(SumNr = 1, SumNr<=N items(ToSummarize),SumNr++,		ScaleMin = Col min(column(ToSummarize[SumNr]));		ScaleMax = Col max(column(ToSummarize[SumNr]));		UnstackedDt = dt << split(			Split By( column(ByCol) ),			Split( column(ToSummarize[SumNr]) ),			Remaining Columns( Drop All ),			Sort by Column Property		);		For(DistNr = 1, DistNr <=N cols(), DistNr++,			Distributions[DistNr] = MakeDistribution( Column( DistNr ), HistogramLineColor[DistNr], HistogramColor[DistNr], FitLineColor[DistNr] );			VariableNames[DistNr] = Column( DistNr ) << get name();			Means[DistNr] = col mean(Column( DistNr ));			StdDevs[DistNr] = col stddev(Column( DistNr ));			Counts[DistNr] = Col Number(Column( DistNr ));		);		MakeFinalWindow(" - " || ToSummarize[SumNr]);	);,	//Unstacked table	ColMins = {};	ColMaxs = {};	For(DistNr = 1, DistNr <=n items(ToSummarize), DistNr++,		Distributions[DistNr] = MakeDistribution( Column( ToSummarize[DistNr] ), HistogramLineColor[DistNr], HistogramColor[DistNr], FitLineColor[DistNr] );		VariableNames[DistNr] = ToSummarize[DistNr];		Means[DistNr] = col mean(Column( ToSummarize[DistNr] ));		StdDevs[DistNr] = col stddev(Column( ToSummarize[DistNr] ));		Counts[DistNr] = Col Number(Column( ToSummarize[DistNr] ));		ColMins[DistNr] = Col min(column(ToSummarize[DistNr]));		ColMaxs[DistNr] = Col max(column(ToSummarize[DistNr]));	);	ScaleMin = Minimum(ColMins);	ScaleMax = Maximum(ColMaxs);	MakeFinalWindow(""););