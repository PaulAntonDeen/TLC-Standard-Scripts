/*************************
Coding by Paul Deen
Script owner gido.van.der.star@asm.com
*************************/

Names Default To Here( 1 );
If( !Namespace Exists( "PeakFitter" ),nsref = New Namespace("PeakFitter"));

// Check for an active table, if not present open dialog.
dt = If( N Rows() > 0,
	dt = Current Data Table(),
	dt = Open()
);
// Clear selections
dt << Clear Select;
dt << Clear Column Selection;

//Main dialog definition
nw = New Window( "Peak fitter",
	Border Box( Left( 3 ), top( 2 ),
		Panel Box("Peak fitter",
			H List Box(
				Panel Box( "Select Columns", colListData = Filter Col Selector( All, width( 253 ), grouped, nLines( Min( N Col( dt ), 10 ) ) ) ),
				Panel Box( "Cast Selected Columns into Roles",
					Lineup Box( N Col( 2 ), Spacing( 3 ),
						Button Box( "Y, Response", colListYbox << Append( colListData << GetSelected ) ),
						colListYbox = Col List Box( width( 200 ), nLines( 1 ), numeric, MinItems( 1 ), MaxItems( 1 ) ),
						Button Box( "X, Factor", colListXbox << Append( colListData << GetSelected ) ),
						colListXbox = Col List Box( width( 200 ), nLines( 1 ), numeric, MinItems( 1 ), MaxItems( 1 ) ),
						Spacer Box( Size( 1, 1 ) )
					)
				),
				Panel Box( "Action",
					Lineup Box( N Col( 1 ),
						Button Box( "OK",
							PeakFitter:YColRecall = colListY = colListYbox << Get Items;
							PeakFitter:XColRecall = colListX = colListXbox << Get Items;
							nw << close window(1);
							BuildPeakSelectionGraphWindow;
							
						),
						Button Box( "Cancel",
							Print( "User hit cancel" );
							nw << close window(1);
						),
						Text Box( " " ),
						Button Box( "Recall",
							Try(
								colListYbox << set items( PeakFitter:YColRecall );
								colListXbox << set items( PeakFitter:XColRecall );
							)
						),
					)
				)
			)
		),
	)
);

BuildFunctionColumnForNonLinear = Expr(
	// Set the background parameters and equation
	Match(Background,
		"No background",
			params = {};		
			formula = Eval Insert("0");
		,
		"Constant background",
			params = {bgC = 0};		
			formula = Eval Insert("bgC");
		,
		"Linear background",
			params = {bgC = 0, bgA = 0};		
			formula = Eval Insert("bgC + bgA * :Name( \!"^Char(colListX[1])^ \!")");
		,
		"Exponential decay background",
			// define background parameters and part of formula
			params = {bgC = 5, bgA = 500, bgdT = 0.15};		
			formula = Eval Insert("bgC + bgA * Exp( -bgdT * :Name( \!"^Char(colListX[1])^ \!"))");
	);
	
	// Generate parameters and formula for peaks in positions list
	Match(FitType,
		"Lorentzian peaks",
			For( i = 1, i <= N Items( XList ), i++,
				i_positions = XList[i];
				i_peaks = YList[i];
				Concat To( params, Eval( Parse( Eval Insert( " { P^i^_FWHM = 1, P^i^_pos0 = ^i_positions^, P^i^_amp = ^i_peaks^ } " ) ) ) );
				Concat To( formula, " + " );
				Concat To(
					formula,
					Eval Insert( " 
						(P$i$_amp / Pi()) * ((P$i$_FWHM / 2) / ((:Name( \!"$Char(colListX[1])$ \!") - P$i$_pos0) ^ 2 + (P$i$_FWHM / 2) ^ 2)) 
					", "$" )
				);
			);
		,
		"Gaussian peaks",
			For( i = 1, i <= N Items( XList ), i++,
				i_positions = XList[i];
				i_peaks = YList[i];
				Concat To( params, Eval( Parse( Eval Insert( " { P^i^_sigma = 1, P^i^_mu = ^i_positions^, P^i^_amp = ^i_peaks^*sqrt(2*pi()) } " ) ) ) );
				Concat To( formula, " + " );
				Concat To(
					formula,
					Eval Insert( " 
						( P$i$_amp/( P$i$_sigma * sqrt(2*Pi()) ) * Exp ( -1/2*( (:Name(\!"$Char(colListX[1])$ \!")-P$i$_mu) / P$i$_sigma )^2 ) )
					", "$" )
				);
			);
	);

	FitColName = "Fit formula - Y: " || Char(ColListY[1]) || " - X: " || Char(ColListX[1]);
	
	//If the formula column already exists, remove column
	If(!Is Missing( Is Scriptable( Try( Column( FitColName ) ) )),
		dt << Delete Columns(FitColName)
	);
	
	//Create new column with equation
	Eval(
		Substitute(
				Expr(
					dt << New Column( FitColName , Numeric, "Continuous", Format( "Best", 12 ), Formula( Parameter( _params, _formula ) ) )
				),
			Expr( _params ), params,
			Expr( _formula ), Parse( formula )
		)
	);
	Biv << close window();
	nw << Close window();
	NL = dt << Nonlinear(
		Y( Column(ColListY) ),
		X( Column(FitColName) ),
		Newton,
		SendToReport(
			Dispatch( {"Plot"}, "Nonlinear Graph", FrameBox, {Transparency( 0.2 )} )
		)
	);
	NL << go();
);

MathematicalBackgroundDescription = Expr(
	V list box(
		Outline Box( "Peak fit options",
			Table Box(
				String Col Box( "Fit",
					{"Background fitting", "No background", "Constant background", "Linear background",
					"Exponential decay background", "", "Peak fitting", "Lorentzian peaks", "Gaussian peaks"}
				),
				String Col Box( "Function",
					{"A single background can be chosen", "0", "c", "c + a*X", "c + a*Exp^(-t*X)", "",
					"A single peak type can be chosen. The algorithm will fit a sum of peaks, with initial values chosen by clicks in a graph.",
					"amp/Pi * ((FWHM/2) / ( (X-pos0)^2 + (FWHM/2)^2) )",
					"amp/( sigma*sqrt(2*Pi) ) * Exp( -1/2*( ((X-mu)/sigma)^2 ) )"}
				),
				String Col Box( "Fit parameters (start values)",
					{"", "None", "bgC (0)", "bgC (0); bgA (0)", "bgC (5); bgA (500); bgdT (0.15)", "",
					"separate parameters for each peak i = 1 to n",
					"Pi_FWHM (1), Pi_pos0 (click), Pi_amp (click)",
					"Pi_sigma (1), Pi_mu (click), Pi_amp ( click*sqrt(2*pi) )"}
				)
			)
		),
		Outline Box( "Fit formulas",
			H List Box(
				Outline Box("Backgrounds",
					V list box(
						Outline Box( "No background",
							Picture Box(
								New Image(
									Char To Blob(
										"1iVBORw0KGgoAAAANSUhEUgAAABgAAAAnCAIAAACaOR/XAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTZEaa/1AAAAmklEQVRIS+3Ryw2AIBBFUZqzIKqhFkuhE3f4xqcJnwFNZOGHuwKSOZmoCZ0SaLkRFTSgalTQgKpRQb+DvJsMm5zf3/SoIAUS5ZifrTF23o56VFAJpbOxqkUFFZBMxjvk9ywqqICwULLByUpU0Augbt8oW+nEaUHb/z8oObecJoRknjUVRAXp0PWooAFVo4IGVI0K+jjUpadBIaxUe2gNMAn4uQAAAABJRU5ErkJggg==",
										"base64compressed"
									),
									"png"
								)
							)
						),
						Outline Box( "Constant background",
							Picture Box(
								New Image(
									Char To Blob(
										"1iVBORw0KGgoAAAANSUhEUgAAACsAAAAnCAIAAAAZ/SbsAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTZEaa/1AAABA0lEQVRYR+2UyxGDMAxEaY6CXA21uBQ6yc3RSv5ifgIm5KB3imSjfdhMhvA2MPi8gcQTZmAGwAzMAJjBfxrM0ziM0xwrLd4NFc7Hdo/EE08acHoVOk9ue47EE48ZaB+TeGLToBxnO7f0naffaRHtnTPvkXhi3YDnV2UqkJOF2CVW2KUSODSop+XXi6cjXVDOQH0Equ8gN7qYXxrw9B0D7NEpSDxxwiDnLFeaGnrNYwdIPLH1Ja5O5qWmqEOxs5G493/geT6oZ6bc2C+3kGCLzN61SDzRG5wHNrrPr0LiiesGfBqXBS4alCsAiwtQIvHEnVu4hcQTZmAGwAzMAMDgXcwghC9R4zsSbyLTjgAAAABJRU5ErkJggg==",
										"base64compressed"
									),
									"png"
								)
							)
						),
						Outline Box( "Linear background",
							Picture Box(
								New Image(
									Char To Blob(
										"4843eJzrDPBz5+WS4mJgYOD19HAJAtJ5QGzOwQQkk3a8mAykGIuD3J0Y1p2TeQnksKQ7+joyMGzs5/6TyArkcxZ4RBYzMPAdAmFGUQ2vBqCgZIlrRElwflpJeWJRKkNBYmZeiV5eaomCiZ6BnqGZS+b6rwwMTLs9XRxDKuLeTtu99ZWBiItmY88EoRVNUyb0KMVwM251YJ/i4CFu/vjsxRPb/rh++hitsln57/mMbu7yz4LaiVr/W5irWIJetso1hlQtdFeYGvdC0GOpONWEelbV3O2b/fitaPXSO6t9nUr7D6v+YDJwzHz4UM37oy2bbdPU0G+f9+RdnVR8J7/SRu60/MVD6qFrZxcCZUxD9W6wfdx49eBSIa5Vu+cGvDHaev2zFa9tk+XUMqmX8272hZdveX1Sxd3MQnmblQ63g0GC5rS9bW83vWXd/VLQZxWP5eS8uxuzTVwPzU06HzZ11pzgSBmFC8s2XFvS+/137c6Yc88/f/7Z4zxxA288/+To3xeUZ4TNzNp4ZKH9ifaZN/KvTTFYvsmkIfHy130HL7VcfpmSv/WmDF+7xZWErVx5Tv0K73dvkpT4kZVvNGNWU7mE6roIMYYbm8rKCry4eTY9ytve7TwxYMGpvdwL3CesN5KxLRaOnhy7X+3i9E0aDj0Xku88ffzxxvvvt99+q9p7bKFDbIVAglQVS6XW7D1/Z/rdXzczcj9bee9avtNMEbu/T2P+vHlJe2p8m9zBM+f9igOqsma8KrnUtG2T8IPb/6caa3Uz92RJy8qoy0xb47v6nEN/wrPgSn7L3neNZ+SPB64PPye0pWYnW9iRsHZVRrUlvjz8HBt3czvPvfe27YKyROjM/tDTnL/u/6hsmBrSlv77qWudHMMFZY1QyUPmNX+/rD9/nvnLQvcHf5jFg3bKfeFYconblmnlF6d+B629F5QneOmTJ2QwNUl0SZHpkiJVu/n1UceT5XXtS58A0zqDp6ufyzqnhCYAUwNznQ==",
										"base64compressed"
									),
									"png"
								)
							)
						),
						Outline Box( "Exponential decay background",
							Picture Box(
								New Image(
									Char To Blob(
										"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",
										"base64compressed"
									),
									"png"
								)
							)
						),
					)
				),
				Outline Box("Peak formula",
					V list box(
						Outline Box( "Lorentzian peak",
							V List Box(
								Text Edit Box( "Sum over all peaks (example for peak 1 only)" ),
								Picture Box(
									New Image(
										Char To Blob(
											"54357eJztWPdXU9sSDh1BmkgJVfAKFgIqEqW3JKgUpQqRKkECIUiUgBJAkC4loNKMtHAVgQCKMRiaCooUheQCQYJ0ESE3giAYEM07eN96P731/oI3a87ZM9+395x91uyZtc7JOOtkJyWhIgECgaROnYS5gEACSMB+Ji4E3PMjh64Bg8AVFzsbUH2/2gLgCAdbO1qDQI+JklsBIiCQEOisgxscwMXFxWVlZZWUlDQ1NXV1dQ0MDKBQqIWFBQgEsDgQHA6C435bgA84OADCgXDb1j8OHI5AIJycnDw8PHx8fOA4XFBQEBaLxeFweDw+NjYWBC8E4ehweCG8EFA6vHAUBygdUF4hHETHgQrhuMJC3GghfLQQx6PjkpKSMjMzb9++TSKRCumFZDK5pqamsbGxubm5EFgyyqPzRuk83uhoIQ9QHr2jo6Onp4fJZI4CAsA8QEanp6c/f/68vLwMOHw+H/R/+b/8N3npoYsHhh0RJ72ugEDSHduXgML+0wkACI6Ee0a6XroYGR1wOQgUERASHqkfHhS555j+Yf0jUFhIwxpQeiGnYNZuV325JZKEmWcKqUF7kou5qGiakr6UYxR7POoW1DEhlbEAFX4vNbXBfx6Mf6KPcH7LUxsV2iy9ptMhK+8b5pNjsZA74HxSu2xwvzCcir6JZu5mkg+Q4a6wzAfpio5ykLvayGP/IXaoYlddFHOsB1EQe4dudBVqn/2b8jq8llYlF4+aPnEsrFdQXp+tUNz9F+5zhkNQhoQSF96Yt+8w5HadXr7H2BToz9ulemcryOPQH43CVdNWir2YoXyRE+Ny47kV5JK738WyaO+K9fJHTAQuBZ6DHUc9RIsJt1o8u9QjmByj1Aiq8jivmMtUWRK6L42yvMYWrm0yBJ+T12ErgHt3FXmU//yInbUueHGMid+jg5zFlh8L6RbMahafbDPZp8NuZ3oLhvhHhoMid/gFGp1BCShghRp75EJz3vNHkhf3Qt4OxPPy1adm7Cy9r08Fxd8reN25AY5bWyOdoYTt/gu8daK1yikjPcp6qrncRbLR31K54U20ZlnDxFYfrO/ARPtPY8cFwzsTq8N2kpDpoE2SBBcqoAnJGQLtluMWLdvvdKlM5k+1hisPj6lTiZMu4cTJX6WNKLg8t+x55dCCQXynr/aQKH89uKYRDiMITN5cc9qQ0WTP15Z9vtLq63/mLvo66sz91e98JnrA/Z34faOerqvpaALqgL3/LSXw/Gv+GNz+8V8zZ8Ae8hDLk9fn+Cpc9TyRE/u8JJPS15MTorvlj/j7t4ZfSwmpUMhWrQubX7JkXqfUKIht4G4WyD2wu1aiFSnDX6slZqdDjyQV7kHeIvy6/XWXY95szf2tz86IXPc6lntfPTpmyKoloYHaTK5+DWv5g3xBeOiO2deyXdr5QhB492IySWbLWBXSVrDAF2VLxbqavm2HmFFlluMa9FDzdoTVFsuzuU2X+N0qEFVszM+m72UO1JBZb8UXx7SjyQlpUahXIwmR+mn0eCp50sRy1h0hzZ013XwPGxMljjo9sZeQ4e7b+vjOCtoOhjERzqEzeWabsa+v+T15bKsBucR2oKov97SA86pe2Zom2I0lahp3ll0GC9ah+wWGcdCsVUPOzPiZuAhqLWWjy3Zsb4QrxAXLq/4uEHbnVij8Y1NKGk2ISBOxPHNV2lKt045wF18yPSS41M/s8lCcgn3MTkijiWhKOrZLUDPM5s6lKMbL3kikpeRAE4n9MKqN8C9iDjqFwVjx1Ut+36ONrLg6LAGnykGogJnu8XDDqBIyTe8nUOQYNH/sKYdOf7T91fpVDYwwVVc8zyBAJfGOKhY8gJ8IzE5QjD9t5egN6s2m3Zk3mX/cZSU5IDB9J5x632zEmGgkyPaVkyYuiU8PXkgZSmxKNGEWrHrPm7HE0WIiDnsH+H960jUpuU7THGVd9q1SzBgQcJ2MPoz95TswupnyaKs3g/bnPHvdc295m4EJzlmZC10NBPVmsObp+nu2J9Me2fZFxl/Np3fvmbPhrHkr5XIfI6xaIJ8ZMzk5NjEJZS+ukNdi6jO7V4AQjqQUNeSHNm+HQB48yYnqO2DEGWToljbEt2pfsmDaUZNsLYXqzL9l6hGNRNnheaMr5t0PlKYQ7seRDfObk2W8uC4l/w+xqyN+o2JX28n4lVUFwoHCOeCVCV7lgZgt84ZaMc38iO3nFdeDHb98r8SD2+pfV01hfJ/9DimYmbeuTYK+4D51osYPGFnqMVfapeJcPsSwecFPp5TRknqI5qCfqhvfnx8cjejsTWRx6KVlzMpRd5LtIdZOZy8NzE5qiBL0gqnNw1AfdFspJn6khanScNSctR9t9ygzL2b5MV4X2Ovd8bWmFgXBtq+fgrMachceI6xbErh6T19AXrhJAw9ekzrPb04qWH+1/9I+w/KbN6Dm4D7B5NKppq6Ky+XjlpEHDgrbfjoQwcjZU7h2L3BIzIlKINRHM+5qYNSoHOFwqXGaFhvrb8z4skSfsMbEUHCMB3HPfl74Mt055SBNBZViBgOzk6NER/wWtbOUHnqj+0bMPlEsdrE3+xIVX1xRZ7oYMwTfx2sjD8KoHOuy7Ld7kVep5jaeg6rMT8wV378L038etRvTSX46A0ZufDtyMtb/VW0UK/QRE90aGmgoWvdPm1dDC5iNyEGAQk6YZ3/znGeUXoCVcCqKsczIcpFlb5IGRpUrGP7922ZPKSXiP4jshJynpg8yL1yJ3RYMjvo2o9cJFZicfIZAel35Ik1NMRuJL9bASHKVAz2aLRaL+i+IsbVLOedQMRQItWrKNH/49O1U5q0TDMV17+d6g4FYsk/nJR/PQ3Vv46LU0D9LOfjnez8WkxrNWDrsHTdGGj1CwRyMGpApjuOPlYDDJHywIbHi3YonCS12Qj52LW9DQH2bnNbx8XsgyZ/R7QMiYtV93QnvuF3FDpJUIS6mlPNVr4SX5lbwhm3VYtb6wZN4/czGryyXT+pLNj9uzje3OKb9wj/YZk1vTJpVSzdDYw2kxn9erlgj1CtRA4e/R29BiE8TaTLtLb7qx/gTnq4hnkTv7b1q1QX7eaFDr1GkqFW5iLrmdIJEfv+aFGe7jBrkkWCeqxFbAyOEnQUJiUNHvzkdN9QHSmZNqNJkndVFe4OsHJfltfr+2GGBCcihGO+PIEMW6DRzlgrXdU5dmEdJOR4mOoLuUmy2X4Kd/+sKNg1ixN6xFVX744AVqyN7AjyeQbu33TBYaIOp24HcKlkvSTzv1b+7CAstVuOWZ4OChFUrTmTTsuZNlh7Xy7D3AHPMhv/ts9Atyy27uPcB0LRGclmQvauU0wpsC/7eJNhApAf50PKjJFrgPpPWWf400Dn1Bgoy1HfChgw/WcU5q694X0EHUxF+9gZ5TZqoFdRFvtOBglBEsQV0YR8PvdMHHFgdnQiS5oh9Sg/yKgPtt0d1PyZAnUGLW+3yIzuSZB75aW8jUgynqcCmvRNpA2/IR0V6kZ7mbKykhdsT7EZ4spWXZK2daWTOLvvQmUyGGEAas7NN2V4ejgOLPwDykJ3pS3CRlJnzvmTxVM6d/Eq8XfbpPiWO9J2nj0KpJOE3j5/ltYEKBYMgFBWueZlX25xS36wpSxnT02/aUp518ROc2V7w9Sjx+tGzrI4a5unr0sSJIKmTOuvPeBP1esr+9wKWL18y/s2VZsYQn7ZdeBuSnsTeUda6ZyJGNXs9osnm3YTFb/5iahupid+3JP4R8YPShAuqhKybhg3CjmjMlWhrpflACIQE+L1rw3JYxYXY9s3B/vwe5gpfj0rdnCMRGjV0x8SJPjVE/pzBEWiYylL8+7+788rd2yOZt7wuuEVru4aqnsOtPhGUcZxnOkXpuufs5Gb8zeof+EWGtgWpC60jg1GnGZXeG7slDzE4RRpsOKZY6JVxtWdxZT6xL7OEkoM2bdR6vjGtFO3T9zRzvaVMATkxNlmHiSbcHR3T7HE3ld2H6B63nWJb28t0S1ibXVlNFAuGj7+YK3I1PkpVatVSUnhYdJcVIwD5KcqD1v891zqIaHDbdFk/y0/t4xFQ6Ncfa8QNuFldf+w/dDQobLY3Z7AyrCoutdRiCOVTe4C4k9tryIruRVfHrtTV/5OchRDngfIsh5+VyuxqOgJa9TubhKaqPuqUO2eHVvLvXCvkZNIXTu3aDRyTOTRuPauEZlZrlRNUoOWzuT+2euXaRQhwYJR3Ye2lOKqfINcEnjNCFrEPt9Mtiu0La5HNEq+acBdMbFQMpUpFUrFzWSaJDdz1s+WUlOYRK9QOGaxdnaIt+uRvxGdNK0NvuoIbSvVrtxK0AhbVcIKziVHl9QXtNakHnYsoKTU/WmcITq4B5Hd6/ObUBlgAMMddpJbSkJG2blOhXnB+87zHNnb29U5NbknNbBd8DK0GlNEzd1V5M9lRo05bwplGky8vh8mprrmUFPtbdWqawblfGfonPd7UyTaeW6oEKljT7fpJ9+Sr6CbYu3P7UtjoYyndyBMuWm3xil/e2JKg7m9AL/WeEYG6Vqs5MBe1Hp6ObqnZ+OxucnE/PQnh+4WSYq6wE4PKlWOW1i7ON7InzqVTUnpl6FqjJC2yejXiikekMvGPLUrKoeEMv4dgFIxqeIvOabr8MiDIZgB5wj1/Eoafl2OGy6+d4zX5dirFsDoqVL6W1PoaaLOplVB9VfXLiyCdtpzndc0SReglN1Oa2/3OIYSRDimsKDMzKiDskAcuKJNSvZjruOYUW4TO3uiyfy/gPD507vGjihyRCjK3+mCUD3ZZ0ksVa2xIO2wDN2W5h8kEFweaH/MwO37wQ1pW1O395TIKRLwzvkabID/7BQYnSX/7lVTX6XjjicOdpx3fhqfIcdppkkP381XGXKfJjmMa0Z8EFvvVVLQq1U33RojVyht+ImZFkaxST3PqdWszM7LWixT+xzfOP4RODlTi1G/mj7hfW6qHgZakdvjS9g8P0Cm4E6zexv/GvwCSyVe5",
											"base64compressed"
										),
										"png"
									)
								)
							)
						),
						Outline Box( "Gaussian peak",
							V List Box(
								Text Edit Box( "Sum over all peaks (example for peak 1 only)" ),
								Picture Box(
									New Image(
										Char To Blob(
											"",
											"base64compressed"
										),
										"png"
									)
								)
							)
						)
					)
				)
			),
		),
	);
);

BuildPeakSelectionGraphWindow = expr(
	nw = New Window( "Peak fitter",
		tb = Tab Box(
			"Fit peaks to data",
			Eval( Expr( Biv = dt << Bivariate( Y( Column( colListY ) ), X( Column( colListX ) ) ) ) );
			FRMBX = Report( biv )[FrameBox( 1 )];
			XList = {};
			YList = {};
			ScriptOn = 1;

			FRMBX << Add Graphics Script(
				Description( "Mousetrapper" ),
				Mousetrap(
					//On mouseDown and move
					If( ScriptOn,
						Insert Into( XList, x );
						Insert Into( YList, y );
						ScriptOn = 0;
					), 
					//On mouseUp
					ScriptOn = 1
				)
			);

			FRMBX << Add Graphics Script( Description( "Markers" ), Marker( Marker State( 16 ), Color State( 3 ), Matrix( XList ), Matrix( YList ) ) );
			Report( Biv ) << prepend( Text Box( "            Click in the graph on the top of each peak that you want to fit.", <<set wrap(1000) ) );
			Report( Biv ) << Append(
				Panel Box("Fit formula",
					H list box(
						Panel Box( "Formula components",
							V List Box(
								BackgroundBox = Radio Box( {"No background", "Constant background", "Linear background", "Exponential decay background"} ),
								FitTypeBox = Radio Box( {"Lorentzian peaks", "Gaussian peaks"} ), 
							)
						),
						Lineup Box(NCol(1),
							Button Box( "Fit formula",
								Background = BackgroundBox << get selected;
								FitType = FitTypeBox << get selected;
								If(n items(XList)==0,
									New window("Error",<<modal,text box("You have not selected any peaks in the graph, make sure you select at least one."))
								,
									BuildFunctionColumnForNonLinear
								);
							),
							Button Box( "Start over",
								XList = {};
								YList = {};
								FRMBX << Reshow();
							)
						)
					)
				)
			);
			
			Try(
				colListYbox << set items( PeakFitter:YColRecall );
				colListXbox << set items( PeakFitter:XColRecall );
			)

		,
			"Mathematical background of this script",
			MathematicalBackgroundDescription
		);
	);
);
